// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: vms.proto

package server

import (
	"context"

	"titan-vm/vms/internal/logic"
	"titan-vm/vms/internal/svc"
	"titan-vm/vms/pb"
)

type VmsServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedVmsServer
}

func NewVmsServer(svcCtx *svc.ServiceContext) *VmsServer {
	return &VmsServer{
		svcCtx: svcCtx,
	}
}

// Libvirt
func (s *VmsServer) CreateVMWithLibvirt(ctx context.Context, in *pb.CreateVMWithLibvirtRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewCreateVMWithLibvirtLogic(ctx, s.svcCtx)
	return l.CreateVMWithLibvirt(in)
}

func (s *VmsServer) CreateVolWithLibvirt(ctx context.Context, in *pb.CreateVolWithLibvirtReqeust) (*pb.CreateVolWithLibvirtResponse, error) {
	l := logic.NewCreateVolWithLibvirtLogic(ctx, s.svcCtx)
	return l.CreateVolWithLibvirt(in)
}

func (s *VmsServer) GetVol(ctx context.Context, in *pb.GetVolRequest) (*pb.GetVolResponse, error) {
	l := logic.NewGetVolLogic(ctx, s.svcCtx)
	return l.GetVol(in)
}

// rpc ListHostNetworkInterfaceWithLibvirt(ListHostNetworkInterfaceRequest) returns (ListHostNetworkInterfaceResponse);
func (s *VmsServer) AddNetworkInterfaceWithLibvirt(ctx context.Context, in *pb.AddNetworkInterfaceRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewAddNetworkInterfaceWithLibvirtLogic(ctx, s.svcCtx)
	return l.AddNetworkInterfaceWithLibvirt(in)
}

func (s *VmsServer) DeleteNetworkInterfaceWithLibvirt(ctx context.Context, in *pb.DeleteNetworkInterfaceRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewDeleteNetworkInterfaceWithLibvirtLogic(ctx, s.svcCtx)
	return l.DeleteNetworkInterfaceWithLibvirt(in)
}

func (s *VmsServer) AddDiskWithLibvirt(ctx context.Context, in *pb.AddDiskRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewAddDiskWithLibvirtLogic(ctx, s.svcCtx)
	return l.AddDiskWithLibvirt(in)
}

func (s *VmsServer) DeleteDiskWithLibvirt(ctx context.Context, in *pb.DeleteDiskRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewDeleteDiskWithLibvirtLogic(ctx, s.svcCtx)
	return l.DeleteDiskWithLibvirt(in)
}

func (s *VmsServer) AddHostdevWithLibvirt(ctx context.Context, in *pb.AddHostdevRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewAddHostdevWithLibvirtLogic(ctx, s.svcCtx)
	return l.AddHostdevWithLibvirt(in)
}

func (s *VmsServer) DeleteHostdevWithLibvirt(ctx context.Context, in *pb.DeleteHostdevRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewDeleteHostdevWithLibvirtLogic(ctx, s.svcCtx)
	return l.DeleteHostdevWithLibvirt(in)
}

func (s *VmsServer) GetVncPortWithLibvirt(ctx context.Context, in *pb.VMVncPortRequest) (*pb.VMVncPortResponse, error) {
	l := logic.NewGetVncPortWithLibvirtLogic(ctx, s.svcCtx)
	return l.GetVncPortWithLibvirt(in)
}

func (s *VmsServer) ReinstallVMWithLibvirt(ctx context.Context, in *pb.ReinstallVMRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewReinstallVMWithLibvirtLogic(ctx, s.svcCtx)
	return l.ReinstallVMWithLibvirt(in)
}

// common
func (s *VmsServer) CreateVM(ctx context.Context, in *pb.CreateVMRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewCreateVMLogic(ctx, s.svcCtx)
	return l.CreateVM(in)
}

func (s *VmsServer) StartVM(ctx context.Context, in *pb.StartVMRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewStartVMLogic(ctx, s.svcCtx)
	return l.StartVM(in)
}

func (s *VmsServer) StopVM(ctx context.Context, in *pb.StopVMRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewStopVMLogic(ctx, s.svcCtx)
	return l.StopVM(in)
}

func (s *VmsServer) DeleteVM(ctx context.Context, in *pb.DeleteVMRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewDeleteVMLogic(ctx, s.svcCtx)
	return l.DeleteVM(in)
}

func (s *VmsServer) ListVMInstance(ctx context.Context, in *pb.ListVMInstanceReqeust) (*pb.ListVMInstanceResponse, error) {
	l := logic.NewListVMInstanceLogic(ctx, s.svcCtx)
	return l.ListVMInstance(in)
}

func (s *VmsServer) ListImage(ctx context.Context, in *pb.ListImageRequest) (*pb.ListImageResponse, error) {
	l := logic.NewListImageLogic(ctx, s.svcCtx)
	return l.ListImage(in)
}

func (s *VmsServer) DeleteImage(ctx context.Context, in *pb.DeleteImageRequest) (*pb.DeleteImageResponse, error) {
	l := logic.NewDeleteImageLogic(ctx, s.svcCtx)
	return l.DeleteImage(in)
}

// not implement now
func (s *VmsServer) UpdateVM(ctx context.Context, in *pb.UpdateVMRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewUpdateVMLogic(ctx, s.svcCtx)
	return l.UpdateVM(in)
}

func (s *VmsServer) GetVMInfo(ctx context.Context, in *pb.GetVMInfoRequest) (*pb.GetVMInfoResponse, error) {
	l := logic.NewGetVMInfoLogic(ctx, s.svcCtx)
	return l.GetVMInfo(in)
}

// Multipass
func (s *VmsServer) CreateVMWithMultipass(ctx context.Context, in *pb.CreateVMWithMultipassRequest) (*pb.VMOperationResponse, error) {
	l := logic.NewCreateVMWithMultipassLogic(ctx, s.svcCtx)
	return l.CreateVMWithMultipass(in)
}

func (s *VmsServer) MultipassExec(ctx context.Context, in *pb.MultipassExecRequest) (*pb.MultipassExecResponse, error) {
	l := logic.NewMultipassExecLogic(ctx, s.svcCtx)
	return l.MultipassExec(in)
}

// node
func (s *VmsServer) ListNode(ctx context.Context, in *pb.ListNodeRequest) (*pb.ListNodeResponse, error) {
	l := logic.NewListNodeLogic(ctx, s.svcCtx)
	return l.ListNode(in)
}

func (s *VmsServer) GetNode(ctx context.Context, in *pb.GetNodeRequest) (*pb.GetNodeResponse, error) {
	l := logic.NewGetNodeLogic(ctx, s.svcCtx)
	return l.GetNode(in)
}
