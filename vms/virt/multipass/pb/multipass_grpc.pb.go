// Copyright (C) Canonical, Ltd.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 3 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.7
// source: multipass.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rpc_Create_FullMethodName       = "/multipass.Rpc/create"
	Rpc_Launch_FullMethodName       = "/multipass.Rpc/launch"
	Rpc_Purge_FullMethodName        = "/multipass.Rpc/purge"
	Rpc_Find_FullMethodName         = "/multipass.Rpc/find"
	Rpc_Info_FullMethodName         = "/multipass.Rpc/info"
	Rpc_List_FullMethodName         = "/multipass.Rpc/list"
	Rpc_Networks_FullMethodName     = "/multipass.Rpc/networks"
	Rpc_Mount_FullMethodName        = "/multipass.Rpc/mount"
	Rpc_Ping_FullMethodName         = "/multipass.Rpc/ping"
	Rpc_Recover_FullMethodName      = "/multipass.Rpc/recover"
	Rpc_SshInfo_FullMethodName      = "/multipass.Rpc/ssh_info"
	Rpc_Start_FullMethodName        = "/multipass.Rpc/start"
	Rpc_Stop_FullMethodName         = "/multipass.Rpc/stop"
	Rpc_Suspend_FullMethodName      = "/multipass.Rpc/suspend"
	Rpc_Restart_FullMethodName      = "/multipass.Rpc/restart"
	Rpc_Delet_FullMethodName        = "/multipass.Rpc/delet"
	Rpc_Umount_FullMethodName       = "/multipass.Rpc/umount"
	Rpc_Version_FullMethodName      = "/multipass.Rpc/version"
	Rpc_Get_FullMethodName          = "/multipass.Rpc/get"
	Rpc_Set_FullMethodName          = "/multipass.Rpc/set"
	Rpc_Keys_FullMethodName         = "/multipass.Rpc/keys"
	Rpc_Authenticate_FullMethodName = "/multipass.Rpc/authenticate"
	Rpc_Snapshot_FullMethodName     = "/multipass.Rpc/snapshot"
	Rpc_Restore_FullMethodName      = "/multipass.Rpc/restore"
	Rpc_Clone_FullMethodName        = "/multipass.Rpc/clone"
	Rpc_DaemonInfo_FullMethodName   = "/multipass.Rpc/daemon_info"
)

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcClient interface {
	Create(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LaunchRequest, LaunchReply], error)
	Launch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LaunchRequest, LaunchReply], error)
	Purge(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PurgeRequest, PurgeReply], error)
	Find(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FindRequest, FindReply], error)
	Info(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InfoRequest, InfoReply], error)
	List(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ListRequest, ListReply], error)
	Networks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NetworksRequest, NetworksReply], error)
	Mount(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MountRequest, MountReply], error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Recover(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecoverRequest, RecoverReply], error)
	SshInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SSHInfoRequest, SSHInfoReply], error)
	Start(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StartRequest, StartReply], error)
	Stop(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StopRequest, StopReply], error)
	Suspend(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SuspendRequest, SuspendReply], error)
	Restart(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RestartRequest, RestartReply], error)
	Delet(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteRequest, DeleteReply], error)
	Umount(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UmountRequest, UmountReply], error)
	Version(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VersionRequest, VersionReply], error)
	Get(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetRequest, GetReply], error)
	Set(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SetRequest, SetReply], error)
	Keys(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[KeysRequest, KeysReply], error)
	Authenticate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AuthenticateRequest, AuthenticateReply], error)
	Snapshot(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SnapshotRequest, SnapshotReply], error)
	Restore(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RestoreRequest, RestoreReply], error)
	Clone(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CloneRequest, CloneReply], error)
	DaemonInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DaemonInfoRequest, DaemonInfoReply], error)
}

type rpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClient(cc grpc.ClientConnInterface) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) Create(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LaunchRequest, LaunchReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[0], Rpc_Create_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LaunchRequest, LaunchReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_CreateClient = grpc.BidiStreamingClient[LaunchRequest, LaunchReply]

func (c *rpcClient) Launch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LaunchRequest, LaunchReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[1], Rpc_Launch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LaunchRequest, LaunchReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_LaunchClient = grpc.BidiStreamingClient[LaunchRequest, LaunchReply]

func (c *rpcClient) Purge(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PurgeRequest, PurgeReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[2], Rpc_Purge_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PurgeRequest, PurgeReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_PurgeClient = grpc.BidiStreamingClient[PurgeRequest, PurgeReply]

func (c *rpcClient) Find(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FindRequest, FindReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[3], Rpc_Find_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FindRequest, FindReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_FindClient = grpc.BidiStreamingClient[FindRequest, FindReply]

func (c *rpcClient) Info(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InfoRequest, InfoReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[4], Rpc_Info_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InfoRequest, InfoReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_InfoClient = grpc.BidiStreamingClient[InfoRequest, InfoReply]

func (c *rpcClient) List(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ListRequest, ListReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[5], Rpc_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequest, ListReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_ListClient = grpc.BidiStreamingClient[ListRequest, ListReply]

func (c *rpcClient) Networks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NetworksRequest, NetworksReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[6], Rpc_Networks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NetworksRequest, NetworksReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_NetworksClient = grpc.BidiStreamingClient[NetworksRequest, NetworksReply]

func (c *rpcClient) Mount(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MountRequest, MountReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[7], Rpc_Mount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MountRequest, MountReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_MountClient = grpc.BidiStreamingClient[MountRequest, MountReply]

func (c *rpcClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingReply)
	err := c.cc.Invoke(ctx, Rpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Recover(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecoverRequest, RecoverReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[8], Rpc_Recover_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RecoverRequest, RecoverReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_RecoverClient = grpc.BidiStreamingClient[RecoverRequest, RecoverReply]

func (c *rpcClient) SshInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SSHInfoRequest, SSHInfoReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[9], Rpc_SshInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SSHInfoRequest, SSHInfoReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_SshInfoClient = grpc.BidiStreamingClient[SSHInfoRequest, SSHInfoReply]

func (c *rpcClient) Start(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StartRequest, StartReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[10], Rpc_Start_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StartRequest, StartReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_StartClient = grpc.BidiStreamingClient[StartRequest, StartReply]

func (c *rpcClient) Stop(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StopRequest, StopReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[11], Rpc_Stop_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StopRequest, StopReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_StopClient = grpc.BidiStreamingClient[StopRequest, StopReply]

func (c *rpcClient) Suspend(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SuspendRequest, SuspendReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[12], Rpc_Suspend_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SuspendRequest, SuspendReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_SuspendClient = grpc.BidiStreamingClient[SuspendRequest, SuspendReply]

func (c *rpcClient) Restart(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RestartRequest, RestartReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[13], Rpc_Restart_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RestartRequest, RestartReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_RestartClient = grpc.BidiStreamingClient[RestartRequest, RestartReply]

func (c *rpcClient) Delet(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteRequest, DeleteReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[14], Rpc_Delet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeleteRequest, DeleteReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_DeletClient = grpc.BidiStreamingClient[DeleteRequest, DeleteReply]

func (c *rpcClient) Umount(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UmountRequest, UmountReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[15], Rpc_Umount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UmountRequest, UmountReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_UmountClient = grpc.BidiStreamingClient[UmountRequest, UmountReply]

func (c *rpcClient) Version(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VersionRequest, VersionReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[16], Rpc_Version_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VersionRequest, VersionReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_VersionClient = grpc.BidiStreamingClient[VersionRequest, VersionReply]

func (c *rpcClient) Get(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetRequest, GetReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[17], Rpc_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRequest, GetReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_GetClient = grpc.BidiStreamingClient[GetRequest, GetReply]

func (c *rpcClient) Set(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SetRequest, SetReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[18], Rpc_Set_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SetRequest, SetReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_SetClient = grpc.BidiStreamingClient[SetRequest, SetReply]

func (c *rpcClient) Keys(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[KeysRequest, KeysReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[19], Rpc_Keys_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[KeysRequest, KeysReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_KeysClient = grpc.BidiStreamingClient[KeysRequest, KeysReply]

func (c *rpcClient) Authenticate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AuthenticateRequest, AuthenticateReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[20], Rpc_Authenticate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AuthenticateRequest, AuthenticateReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_AuthenticateClient = grpc.BidiStreamingClient[AuthenticateRequest, AuthenticateReply]

func (c *rpcClient) Snapshot(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SnapshotRequest, SnapshotReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[21], Rpc_Snapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SnapshotRequest, SnapshotReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_SnapshotClient = grpc.BidiStreamingClient[SnapshotRequest, SnapshotReply]

func (c *rpcClient) Restore(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RestoreRequest, RestoreReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[22], Rpc_Restore_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RestoreRequest, RestoreReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_RestoreClient = grpc.BidiStreamingClient[RestoreRequest, RestoreReply]

func (c *rpcClient) Clone(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CloneRequest, CloneReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[23], Rpc_Clone_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CloneRequest, CloneReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_CloneClient = grpc.BidiStreamingClient[CloneRequest, CloneReply]

func (c *rpcClient) DaemonInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DaemonInfoRequest, DaemonInfoReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[24], Rpc_DaemonInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DaemonInfoRequest, DaemonInfoReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_DaemonInfoClient = grpc.BidiStreamingClient[DaemonInfoRequest, DaemonInfoReply]

// RpcServer is the server API for Rpc service.
// All implementations must embed UnimplementedRpcServer
// for forward compatibility.
type RpcServer interface {
	Create(grpc.BidiStreamingServer[LaunchRequest, LaunchReply]) error
	Launch(grpc.BidiStreamingServer[LaunchRequest, LaunchReply]) error
	Purge(grpc.BidiStreamingServer[PurgeRequest, PurgeReply]) error
	Find(grpc.BidiStreamingServer[FindRequest, FindReply]) error
	Info(grpc.BidiStreamingServer[InfoRequest, InfoReply]) error
	List(grpc.BidiStreamingServer[ListRequest, ListReply]) error
	Networks(grpc.BidiStreamingServer[NetworksRequest, NetworksReply]) error
	Mount(grpc.BidiStreamingServer[MountRequest, MountReply]) error
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Recover(grpc.BidiStreamingServer[RecoverRequest, RecoverReply]) error
	SshInfo(grpc.BidiStreamingServer[SSHInfoRequest, SSHInfoReply]) error
	Start(grpc.BidiStreamingServer[StartRequest, StartReply]) error
	Stop(grpc.BidiStreamingServer[StopRequest, StopReply]) error
	Suspend(grpc.BidiStreamingServer[SuspendRequest, SuspendReply]) error
	Restart(grpc.BidiStreamingServer[RestartRequest, RestartReply]) error
	Delet(grpc.BidiStreamingServer[DeleteRequest, DeleteReply]) error
	Umount(grpc.BidiStreamingServer[UmountRequest, UmountReply]) error
	Version(grpc.BidiStreamingServer[VersionRequest, VersionReply]) error
	Get(grpc.BidiStreamingServer[GetRequest, GetReply]) error
	Set(grpc.BidiStreamingServer[SetRequest, SetReply]) error
	Keys(grpc.BidiStreamingServer[KeysRequest, KeysReply]) error
	Authenticate(grpc.BidiStreamingServer[AuthenticateRequest, AuthenticateReply]) error
	Snapshot(grpc.BidiStreamingServer[SnapshotRequest, SnapshotReply]) error
	Restore(grpc.BidiStreamingServer[RestoreRequest, RestoreReply]) error
	Clone(grpc.BidiStreamingServer[CloneRequest, CloneReply]) error
	DaemonInfo(grpc.BidiStreamingServer[DaemonInfoRequest, DaemonInfoReply]) error
	mustEmbedUnimplementedRpcServer()
}

// UnimplementedRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRpcServer struct{}

func (UnimplementedRpcServer) Create(grpc.BidiStreamingServer[LaunchRequest, LaunchReply]) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRpcServer) Launch(grpc.BidiStreamingServer[LaunchRequest, LaunchReply]) error {
	return status.Errorf(codes.Unimplemented, "method Launch not implemented")
}
func (UnimplementedRpcServer) Purge(grpc.BidiStreamingServer[PurgeRequest, PurgeReply]) error {
	return status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (UnimplementedRpcServer) Find(grpc.BidiStreamingServer[FindRequest, FindReply]) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedRpcServer) Info(grpc.BidiStreamingServer[InfoRequest, InfoReply]) error {
	return status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedRpcServer) List(grpc.BidiStreamingServer[ListRequest, ListReply]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRpcServer) Networks(grpc.BidiStreamingServer[NetworksRequest, NetworksReply]) error {
	return status.Errorf(codes.Unimplemented, "method Networks not implemented")
}
func (UnimplementedRpcServer) Mount(grpc.BidiStreamingServer[MountRequest, MountReply]) error {
	return status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedRpcServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRpcServer) Recover(grpc.BidiStreamingServer[RecoverRequest, RecoverReply]) error {
	return status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (UnimplementedRpcServer) SshInfo(grpc.BidiStreamingServer[SSHInfoRequest, SSHInfoReply]) error {
	return status.Errorf(codes.Unimplemented, "method SshInfo not implemented")
}
func (UnimplementedRpcServer) Start(grpc.BidiStreamingServer[StartRequest, StartReply]) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedRpcServer) Stop(grpc.BidiStreamingServer[StopRequest, StopReply]) error {
	return status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedRpcServer) Suspend(grpc.BidiStreamingServer[SuspendRequest, SuspendReply]) error {
	return status.Errorf(codes.Unimplemented, "method Suspend not implemented")
}
func (UnimplementedRpcServer) Restart(grpc.BidiStreamingServer[RestartRequest, RestartReply]) error {
	return status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedRpcServer) Delet(grpc.BidiStreamingServer[DeleteRequest, DeleteReply]) error {
	return status.Errorf(codes.Unimplemented, "method Delet not implemented")
}
func (UnimplementedRpcServer) Umount(grpc.BidiStreamingServer[UmountRequest, UmountReply]) error {
	return status.Errorf(codes.Unimplemented, "method Umount not implemented")
}
func (UnimplementedRpcServer) Version(grpc.BidiStreamingServer[VersionRequest, VersionReply]) error {
	return status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedRpcServer) Get(grpc.BidiStreamingServer[GetRequest, GetReply]) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRpcServer) Set(grpc.BidiStreamingServer[SetRequest, SetReply]) error {
	return status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRpcServer) Keys(grpc.BidiStreamingServer[KeysRequest, KeysReply]) error {
	return status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (UnimplementedRpcServer) Authenticate(grpc.BidiStreamingServer[AuthenticateRequest, AuthenticateReply]) error {
	return status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedRpcServer) Snapshot(grpc.BidiStreamingServer[SnapshotRequest, SnapshotReply]) error {
	return status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedRpcServer) Restore(grpc.BidiStreamingServer[RestoreRequest, RestoreReply]) error {
	return status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedRpcServer) Clone(grpc.BidiStreamingServer[CloneRequest, CloneReply]) error {
	return status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedRpcServer) DaemonInfo(grpc.BidiStreamingServer[DaemonInfoRequest, DaemonInfoReply]) error {
	return status.Errorf(codes.Unimplemented, "method DaemonInfo not implemented")
}
func (UnimplementedRpcServer) mustEmbedUnimplementedRpcServer() {}
func (UnimplementedRpcServer) testEmbeddedByValue()             {}

// UnsafeRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcServer will
// result in compilation errors.
type UnsafeRpcServer interface {
	mustEmbedUnimplementedRpcServer()
}

func RegisterRpcServer(s grpc.ServiceRegistrar, srv RpcServer) {
	// If the following call pancis, it indicates UnimplementedRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rpc_ServiceDesc, srv)
}

func _Rpc_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Create(&grpc.GenericServerStream[LaunchRequest, LaunchReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_CreateServer = grpc.BidiStreamingServer[LaunchRequest, LaunchReply]

func _Rpc_Launch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Launch(&grpc.GenericServerStream[LaunchRequest, LaunchReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_LaunchServer = grpc.BidiStreamingServer[LaunchRequest, LaunchReply]

func _Rpc_Purge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Purge(&grpc.GenericServerStream[PurgeRequest, PurgeReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_PurgeServer = grpc.BidiStreamingServer[PurgeRequest, PurgeReply]

func _Rpc_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Find(&grpc.GenericServerStream[FindRequest, FindReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_FindServer = grpc.BidiStreamingServer[FindRequest, FindReply]

func _Rpc_Info_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Info(&grpc.GenericServerStream[InfoRequest, InfoReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_InfoServer = grpc.BidiStreamingServer[InfoRequest, InfoReply]

func _Rpc_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).List(&grpc.GenericServerStream[ListRequest, ListReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_ListServer = grpc.BidiStreamingServer[ListRequest, ListReply]

func _Rpc_Networks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Networks(&grpc.GenericServerStream[NetworksRequest, NetworksReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_NetworksServer = grpc.BidiStreamingServer[NetworksRequest, NetworksReply]

func _Rpc_Mount_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Mount(&grpc.GenericServerStream[MountRequest, MountReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_MountServer = grpc.BidiStreamingServer[MountRequest, MountReply]

func _Rpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Recover_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Recover(&grpc.GenericServerStream[RecoverRequest, RecoverReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_RecoverServer = grpc.BidiStreamingServer[RecoverRequest, RecoverReply]

func _Rpc_SshInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).SshInfo(&grpc.GenericServerStream[SSHInfoRequest, SSHInfoReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_SshInfoServer = grpc.BidiStreamingServer[SSHInfoRequest, SSHInfoReply]

func _Rpc_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Start(&grpc.GenericServerStream[StartRequest, StartReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_StartServer = grpc.BidiStreamingServer[StartRequest, StartReply]

func _Rpc_Stop_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Stop(&grpc.GenericServerStream[StopRequest, StopReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_StopServer = grpc.BidiStreamingServer[StopRequest, StopReply]

func _Rpc_Suspend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Suspend(&grpc.GenericServerStream[SuspendRequest, SuspendReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_SuspendServer = grpc.BidiStreamingServer[SuspendRequest, SuspendReply]

func _Rpc_Restart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Restart(&grpc.GenericServerStream[RestartRequest, RestartReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_RestartServer = grpc.BidiStreamingServer[RestartRequest, RestartReply]

func _Rpc_Delet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Delet(&grpc.GenericServerStream[DeleteRequest, DeleteReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_DeletServer = grpc.BidiStreamingServer[DeleteRequest, DeleteReply]

func _Rpc_Umount_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Umount(&grpc.GenericServerStream[UmountRequest, UmountReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_UmountServer = grpc.BidiStreamingServer[UmountRequest, UmountReply]

func _Rpc_Version_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Version(&grpc.GenericServerStream[VersionRequest, VersionReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_VersionServer = grpc.BidiStreamingServer[VersionRequest, VersionReply]

func _Rpc_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Get(&grpc.GenericServerStream[GetRequest, GetReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_GetServer = grpc.BidiStreamingServer[GetRequest, GetReply]

func _Rpc_Set_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Set(&grpc.GenericServerStream[SetRequest, SetReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_SetServer = grpc.BidiStreamingServer[SetRequest, SetReply]

func _Rpc_Keys_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Keys(&grpc.GenericServerStream[KeysRequest, KeysReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_KeysServer = grpc.BidiStreamingServer[KeysRequest, KeysReply]

func _Rpc_Authenticate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Authenticate(&grpc.GenericServerStream[AuthenticateRequest, AuthenticateReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_AuthenticateServer = grpc.BidiStreamingServer[AuthenticateRequest, AuthenticateReply]

func _Rpc_Snapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Snapshot(&grpc.GenericServerStream[SnapshotRequest, SnapshotReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_SnapshotServer = grpc.BidiStreamingServer[SnapshotRequest, SnapshotReply]

func _Rpc_Restore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Restore(&grpc.GenericServerStream[RestoreRequest, RestoreReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_RestoreServer = grpc.BidiStreamingServer[RestoreRequest, RestoreReply]

func _Rpc_Clone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).Clone(&grpc.GenericServerStream[CloneRequest, CloneReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_CloneServer = grpc.BidiStreamingServer[CloneRequest, CloneReply]

func _Rpc_DaemonInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).DaemonInfo(&grpc.GenericServerStream[DaemonInfoRequest, DaemonInfoReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_DaemonInfoServer = grpc.BidiStreamingServer[DaemonInfoRequest, DaemonInfoReply]

// Rpc_ServiceDesc is the grpc.ServiceDesc for Rpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multipass.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _Rpc_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "create",
			Handler:       _Rpc_Create_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "launch",
			Handler:       _Rpc_Launch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "purge",
			Handler:       _Rpc_Purge_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "find",
			Handler:       _Rpc_Find_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "info",
			Handler:       _Rpc_Info_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "list",
			Handler:       _Rpc_List_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "networks",
			Handler:       _Rpc_Networks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "mount",
			Handler:       _Rpc_Mount_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "recover",
			Handler:       _Rpc_Recover_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ssh_info",
			Handler:       _Rpc_SshInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "start",
			Handler:       _Rpc_Start_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "stop",
			Handler:       _Rpc_Stop_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "suspend",
			Handler:       _Rpc_Suspend_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "restart",
			Handler:       _Rpc_Restart_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "delet",
			Handler:       _Rpc_Delet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "umount",
			Handler:       _Rpc_Umount_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "version",
			Handler:       _Rpc_Version_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "get",
			Handler:       _Rpc_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "set",
			Handler:       _Rpc_Set_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "keys",
			Handler:       _Rpc_Keys_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "authenticate",
			Handler:       _Rpc_Authenticate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "snapshot",
			Handler:       _Rpc_Snapshot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "restore",
			Handler:       _Rpc_Restore_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "clone",
			Handler:       _Rpc_Clone_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "daemon_info",
			Handler:       _Rpc_DaemonInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "multipass.proto",
}
