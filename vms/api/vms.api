// vms.api
type (
	VMOperationResponse {
		Success bool   `json:"success"`
		Message string `json:"message"`
	}
	CreateVMRequest {
		Id       string `json:"id"`
		VmName   string `json:"vm_name"`
		Cpu      int32  `json:"cpu"`
		Memory   int32  `json:"memory"`
		DiskSize int32  `json:"disk_size"`
		Image    string `json:"image"`
	}
	CreateVolWithLibvirtReqeust {
		Id         string `json:"id"`
		Name       string `json:"name"`
		Pool       string `json:"pool"`
		Capacity   int32  `json:"capacity"`
		Allocation int32  `json:"allocation"`
		Format     string `json:"format"`
	}
	CreateVolWithLibvirtResponse {
		Pool string `json:"pool"`
		Name string `json:"name"`
		key  string `json:"key"`
	}
	StartVMRequest {
		Id     string `json:"id"`
		VmName string `json:"vm_name"`
	}
	StopVMRequest {
		Id     string `json:"id"`
		VmName string `json:"vm_name"`
	}
	DeleteVMRequest {
		Id     string `json:"id"`
		VmName string `json:"vm_name"`
	}
	UpdateVMRequest {
		Id     string `json:"id"`
		VmName string `json:"vm_name"`
	}
	ListVMInstanceReqeust {
		Id string `form:"id"`
	}
	VMInfo {
		Name  string `json:"name"`
		State string `json:"state"`
		Ip    string `json:"ip"`
		Image string `json:"image"`
	}
	ListVMInstanceResponse {
		VmInfos []VMInfo `json:"vm_infos"`
	}
	ListImageRequest {
		Id string `form:"id"`
	}
	ListImageResponse {
		Images []string `json:"images"`
	}
	DeleteImageRequest {
		Id   string `json:"id"`
		Path string `json:"path"`
	}
	multipassExecRequest {
		Id           string `json:"id"`
		InstanceName string `json:"instance_name"`
		Command      string `json:"command"`
	}
	multipassExecResponse {
		Output string `json:"output"`
	}
	Node {
		Id             string `json:"id"`
		OS             string `json:"os"`
		VmType         string `json:"vm_type"`
		TotalCpu       int    `json:"total_cpu"`
		TotalMemory    int    `json:"total_memory"`
		SystemDiskSize int    `json:"system_disk_size"`
		IP             string `json:"ip"`
		Online         bool   `json:"online"`
		Extend         string `json:"extend"`
	}
	ListNodeReqeust {
		Start int `form:"start"`
		End   int `form:"end"`
	}
	ListNodeResponse {
		Nodes []*Node `json:"nodes"`
		Total int32   `json:"total"`
	}
	LoginRequest {
		UserName string `json:"user_name"`
		Password string `json:"password"`
	}
	LoginResponse {
		Token string `json:"token"`
	}
	DownloadImageRequest {
		Id   string `json:"id"`
		URL  string `json:"url"`
		MD5  string `json:"md5"`
		Path string `json:"path"`
	}
	DownloadImageResponse {
		TaskId string `json:"task_id"`
	}
	DownloadTaskDeleteRequest {
		Id     string `json:"id"`
		TaskId string `json:"task_id"`
	}
	DownloadTaskDeleteResponse {
		Success bool   `json:"success"`
		ErrMsg  string `json:"err_msg"`
	}
	DownloadTaskListRequest {
		Id string `form:"id"`
	}
	DownloadTask {
		TaskId       string `json:"taskId"`
		URL          string `json:"url"`
		MD5          string `json:"md5"`
		Path         string `json:"path"`
		TotalSize    int64  `json:"total_size"`
		DownloadSize int64  `json:"download_size"`
		Running      bool   `json:"running"`
		Success      bool   `json:"success"`
		ErrMsg       string `json:"err_msg"`
	}
	DownloadTaskListResponse {
		Tasks []*DownloadTask `json:"tasks"`
	}
	DownloadTaskGetRequest {
		Id     string `json:"id"`
		TaskId string `json:"taskId"`
	}
	NodeWSRequest {
		NodeId string `form:"id"`
		// windows, linux, macos
		OS string `form:"os"`
		// multipass or libvirt
		VMAPI  string `form:"vmapi"`
		Pubkey string `header:"pubkey"`
		Sign   string `header:"sign"`
	}
	VMWSRequest {
		NodeId  string `form:"id"`
		Address string `form:"address,optional"`
		// 'multipass' r 'libvirt'
		VMAPI string `form:"vmapi,optional"`
		// 'raw' or 'websocket'
		Transport string `form:"transport"`
	}
	SSHWSReqeust {
		NodeId string `form:"id"`
		Type   string `form:"type,optional"`
		Addr   string `form:"addr,optional"`
	}
	SSHWSMessage {
		// 'error', 'stdin', 'stdout', 'resize'
		Type string `json:"type"`
		Data string `json:"data,optional"`
		Cols uint   `json:"cols,optional"`
		Rows uint   `json:"rows,optional"`
	}
	HostInfoRequest {
		NodeId string `form:"id"`
	}
	CPU {
		Num    int32   `json:"num"`
		Usage  float32 `json:"usage"`
		Arch   string  `json:"arch"`
		Vendor string  `json:"vendor"`
	}
	Memory {
		Total int64 `json:"total"`
		Used  int64 `json:"used"`
	}
	Disk {
		Name       string `json:"name"`
		Type       string `json:"type"`
		Total      int64  `json:"total"`
		Used       int64  `json:"used"`
		MountPoint string `json:"mount_point"`
		FsType     string `json:"fs_type"`
	}
	NetworkInterface {
		Name  string `json:"name"`
		Mac   string `json:"mac"`
		State string `json:"state"`
	}
	HostInfoResponse {
		CPU        CPU                `json:"cpu"`
		Memory     Memory             `json:"memory"`
		Disks      []Disk             `json:"disks"`
		Interfaces []NetworkInterface `json:"network_interfaces"`
	}
	VMInfoReqeust {
		Id     string `form:"id"`
		VmName string `form:"vm_name"`
	}
	VMDisk {
		// 1 file, 2 block, 3 nvme
		DiskType          uint32 `json:"disk_type,options=1|2|3"`
		SourcePath        string `json:"source_path"`
		SourcePciAddrBus  uint32 `json:"source_pci_addr_bus"`
		SourcePciAddrSlot uint32 `json:"source_pci_addr_slot"`
		TargetDev         string `json:"target_dev"`
		TargetBus         string `json:"target_bus"`
	}
	VMNetworkInterface {
		Name        string `json:"name"`
		Type        string `json:"type"`
		Source      string `json:"source"`
		SourceModel string `json:"source_model"`
		Model       string `json:"model"`
		Mac         string `json:"mac"`
	}
	VMHostdev {
		SourceAddrDomain uint32 `json:"source_addr_domain"`
		SourceAddrBus    uint32 `json:"source_addr_bus"`
		SourceAddrSlot   uint32 `json:"source_addr_slot"`
	}
	VMInfoResponse {
		CPU        uint32                `json:"cpu"`
		Memroy     uint64                `json:"memory"`
		Disks      []*VMDisk             `json:"disks"`
		Interfaces []*VMNetworkInterface `json:"interfaces"`
		Hostdevs   []*VMHostdev          `json:"hostdevs"`
		VncPort    int32                 `json:"vnc_port"`
	}
	VMDiskAddRequest {
		Id         string `json:"id"`
		VmName     string `json:"vm_name"`
		DiskType   uint32 `json:"disk_type"`
		SourcePath string `json:"source_path,optional"`
		TargetDev  string `json:"target_dev,optional"`
		TargetBus  string `json:"target_bus,optional"`
	}
	VMDiskDeleteRequest {
		Id               string `json:"id"`
		VmName           string `json:"vm_name"`
		DiskType         uint32 `json:"disk_type"`
		SourcePciAddrBus uint32 `json:"source_pci_addr_bus,optional"`
		TargetDev        string `json:"target_dev,optional"`
	}
	VMInterfaceAddRequest {
		Id              string `json:"id"`
		VmName          string `json:"vm_name"`
		InterfaceType   uint32 `json:"interface_type"`
		SourceDirectDev string `json:"source_direct_dev,optional"`
		Model           uint32 `json:"model"`
	}
	VMInterfaceDeleteRequest {
		Id     string `json:"id"`
		VmName string `json:"vm_name"`
		Mac    string `json:"mac"`
	}
	VMHostdevAddRequest {
		Id               string `json:"id"`
		VmName           string `json:"vm_name"`
		SourceAddrDomain uint32 `json:"source_addr_domain,optional"`
		SourceAddrBus    uint32 `json:"source_addr_bus"`
		SourceAddrSlot   uint32 `json:"source_addr_slot,optional"`
	}
	VMHostdevDeleteRequest {
		Id               string `json:"id"`
		VmName           string `json:"vm_name"`
		SourceAddrDomain uint32 `json:"source_addr_domain,optional"`
		SourceAddrBus    uint32 `json:"source_addr_bus"`
		SourceAddrSlot   uint32 `json:"source_addr_slot,optional"`
	}
	NvmeInfo {
		Name    string `json:"name"`
		PciAddr string `json:"pci_addr"`
	}
	ListNvmeRequest {
		NodeId string `form:"id"`
	}
	ListNvmeResponse {
		Nvmes []*NvmeInfo `json:"nvmes"`
	}
	SetNodeExtendInfoRequest {
		Id string `json:"id"`
		// json string
		Extend string `json:"extend"`
	}
	ReInstallVMRequest {
		Id     string `json:"id"`
		VmName string `json:"vm_name"`
	}
)

service vms-api {
	@handler login
	post /api/login (LoginRequest) returns (LoginResponse)
}

@server (
	jwt: JwtAuth // Enable jwt authentication
)
service vms-api {
	@handler createVM
	post /api/vm/create (CreateVMRequest) returns (VMOperationResponse)

	@handler createVolWithLibvirt
	post /api/vm/libvirt/volume/create (CreateVolWithLibvirtReqeust) returns (CreateVolWithLibvirtResponse)

	@handler startVM
	post /api/vm/start (StartVMRequest) returns (VMOperationResponse)

	@handler stopVM
	post /api/vm/stop (StopVMRequest) returns (VMOperationResponse)

	@handler deleteVM
	post /api/vm/delete (DeleteVMRequest) returns (VMOperationResponse)

	@handler updateVM
	post /api/vm/update (UpdateVMRequest) returns (VMOperationResponse)

	@handler listVMInstance
	get /api/vm/list

	@handler listImage
	get /api/image/list

	@handler deleteImage
	post /api/image/delete (DeleteImageRequest)

	@handler multipassExec
	post /api/vm/multipass/exec (multipassExecRequest) returns (multipassExecResponse)

	@handler listNode
	get /api/node/list

	@handler downloadImage
	post /api/task/dwonloadimage (DownloadImageRequest) returns (DownloadImageResponse)

	@handler downloadTaskList
	get /api/task/list

	@handler downloadTaskDelete
	post /api/task/delete (DownloadTaskDeleteRequest)

	@handler downloadTaskGet
	get /api/task/get (DownloadTaskGetRequest) returns (DownloadTask)

	@handler getHostInfo
	get /api/node/hostinfo

	@handler getVMInfo
	get /api/vm/info (VMInfoReqeust) returns (VMInfoResponse)

	@handler vmDiskDelete
	post /api/vm/disk/delete (VMDiskDeleteRequest)

	@handler vmDiskAdd
	post /api/vm/disk/add (VMDiskAddRequest)

	@handler vmInterfaceDelete
	post /api/vm/interface/delete (VMInterfaceDeleteRequest)

	@handler vmInterfaceAdd
	post /api/vm/interface/add (VMInterfaceAddRequest)

	@handler vmHosthostAdd
	post /api/vm/hostdev/add (VMHostdevAddRequest)

	@handler vmHosthostDelete
	post /api/vm/hostdev/delete (VMHostdevDeleteRequest)

	@handler listNvme
	get /api/node/nvme/list (ListNvmeRequest) returns (ListNvmeResponse)

	@handler setExtendInfo
	post /api/node/extend/set (SetNodeExtendInfoRequest)

	@handler reInstallVM
	post /api/vm/reinstall (ReInstallVMRequest)
}

@server (
	middleware: JwtMiddleware // Enable jwt authentication
)
service vms-api {
	@handler vmWS
	get /ws/vm

	@handler sshWS
	get /ws/ssh
}

service vms-api {
	@handler nodeWS
	get /ws/node
}

