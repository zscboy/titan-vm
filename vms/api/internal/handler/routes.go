// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2

package handler

import (
	"net/http"

	"titan-vm/vms/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/login",
				Handler: loginHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/image/delete",
				Handler: deleteImageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/image/list",
				Handler: listImageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/node/extend/set",
				Handler: setExtendInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/node/hostinfo",
				Handler: getHostInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/node/list",
				Handler: listNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/node/nvme/list",
				Handler: listNvmeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/task/delete",
				Handler: downloadTaskDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/task/dwonloadimage",
				Handler: downloadImageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/task/get",
				Handler: downloadTaskGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/task/list",
				Handler: downloadTaskListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/create",
				Handler: createVMHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/delete",
				Handler: deleteVMHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/disk/add",
				Handler: vmDiskAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/disk/delete",
				Handler: vmDiskDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/hostdev/add",
				Handler: vmHosthostAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/hostdev/delete",
				Handler: vmHosthostDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/vm/info",
				Handler: getVMInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/interface/add",
				Handler: vmInterfaceAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/interface/delete",
				Handler: vmInterfaceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/libvirt/volume/create",
				Handler: createVolWithLibvirtHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/vm/list",
				Handler: listVMInstanceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/multipass/exec",
				Handler: multipassExecHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/reinstall",
				Handler: reInstallVMHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/start",
				Handler: startVMHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/stop",
				Handler: stopVMHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/vm/update",
				Handler: updateVMHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/ws/ssh",
					Handler: sshWSHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/ws/vm",
					Handler: vmWSHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/ws/node",
				Handler: nodeWSHandler(serverCtx),
			},
		},
	)
}
