// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2

package types

type CPU struct {
	Num    int32   `json:"num"`
	Usage  float32 `json:"usage"`
	Arch   string  `json:"arch"`
	Vendor string  `json:"vendor"`
}

type CreateVMRequest struct {
	Id       string `json:"id"`
	VmName   string `json:"vm_name"`
	Cpu      int32  `json:"cpu"`
	Memory   int32  `json:"memory"`
	DiskSize int32  `json:"disk_size"`
	Image    string `json:"image"`
}

type CreateVolWithLibvirtReqeust struct {
	Id         string `json:"id"`
	Name       string `json:"name"`
	Pool       string `json:"pool"`
	Capacity   int32  `json:"capacity"`
	Allocation int32  `json:"allocation"`
	Format     string `json:"format"`
}

type CreateVolWithLibvirtResponse struct {
	Pool string `json:"pool"`
	Name string `json:"name"`
	Key  string `json:"key"`
}

type DeleteImageRequest struct {
	Id   string `json:"id"`
	Path string `json:"path"`
}

type DeleteVMRequest struct {
	Id     string `json:"id"`
	VmName string `json:"vm_name"`
}

type Disk struct {
	Name       string `json:"name"`
	Type       string `json:"type"`
	Total      int64  `json:"total"`
	Used       int64  `json:"used"`
	MountPoint string `json:"mount_point"`
	FsType     string `json:"fs_type"`
}

type DownloadImageRequest struct {
	Id   string `json:"id"`
	URL  string `json:"url"`
	MD5  string `json:"md5"`
	Path string `json:"path"`
}

type DownloadImageResponse struct {
	TaskId string `json:"task_id"`
}

type DownloadTask struct {
	TaskId       string `json:"taskId"`
	URL          string `json:"url"`
	MD5          string `json:"md5"`
	Path         string `json:"path"`
	TotalSize    int64  `json:"total_size"`
	DownloadSize int64  `json:"download_size"`
	Running      bool   `json:"running"`
	Success      bool   `json:"success"`
	ErrMsg       string `json:"err_msg"`
}

type DownloadTaskDeleteRequest struct {
	Id     string `json:"id"`
	TaskId string `json:"task_id"`
}

type DownloadTaskDeleteResponse struct {
	Success bool   `json:"success"`
	ErrMsg  string `json:"err_msg"`
}

type DownloadTaskGetRequest struct {
	Id     string `json:"id"`
	TaskId string `json:"taskId"`
}

type DownloadTaskListRequest struct {
	Id string `form:"id"`
}

type DownloadTaskListResponse struct {
	Tasks []*DownloadTask `json:"tasks"`
}

type HostInfoRequest struct {
	NodeId string `form:"id"`
}

type HostInfoResponse struct {
	CPU        CPU                `json:"cpu"`
	Memory     Memory             `json:"memory"`
	Disks      []Disk             `json:"disks"`
	Interfaces []NetworkInterface `json:"network_interfaces"`
}

type ListImageRequest struct {
	Id string `form:"id"`
}

type ListImageResponse struct {
	Images []string `json:"images"`
}

type ListNodeReqeust struct {
	Start int `form:"start"`
	End   int `form:"end"`
}

type ListNodeResponse struct {
	Nodes []*Node `json:"nodes"`
	Total int32   `json:"total"`
}

type ListNvmeRequest struct {
	NodeId string `form:"id"`
}

type ListNvmeResponse struct {
	Nvmes []*NvmeInfo `json:"nvmes"`
}

type ListVMInstanceReqeust struct {
	Id string `form:"id"`
}

type ListVMInstanceResponse struct {
	VmInfos []VMInfo `json:"vm_infos"`
}

type LoginRequest struct {
	UserName string `json:"user_name"`
	Password string `json:"password"`
}

type LoginResponse struct {
	Token string `json:"token"`
}

type Memory struct {
	Total int64 `json:"total"`
	Used  int64 `json:"used"`
}

type NetworkInterface struct {
	Name  string `json:"name"`
	Mac   string `json:"mac"`
	State string `json:"state"`
}

type Node struct {
	Id             string `json:"id"`
	OS             string `json:"os"`
	VmType         string `json:"vm_type"`
	TotalCpu       int    `json:"total_cpu"`
	TotalMemory    int    `json:"total_memory"`
	SystemDiskSize int    `json:"system_disk_size"`
	IP             string `json:"ip"`
	Online         bool   `json:"online"`
	Extend         string `json:"extend"`
}

type NodeWSRequest struct {
	NodeId string `form:"id"`
	OS     string `form:"os"`
	VMAPI  string `form:"vmapi"`
	Pubkey string `header:"pubkey"`
	Sign   string `header:"sign"`
}

type NvmeInfo struct {
	Name    string `json:"name"`
	PciAddr string `json:"pci_addr"`
}

type ReInstallVMRequest struct {
	Id     string `json:"id"`
	VmName string `json:"vm_name"`
}

type SSHWSMessage struct {
	Type string `json:"type"`
	Data string `json:"data,optional"`
	Cols uint   `json:"cols,optional"`
	Rows uint   `json:"rows,optional"`
}

type SSHWSReqeust struct {
	NodeId string `form:"id"`
	Type   string `form:"type,optional"`
	Addr   string `form:"addr,optional"`
}

type SetNodeExtendInfoRequest struct {
	Id     string `json:"id"`
	Extend string `json:"extend"`
}

type StartVMRequest struct {
	Id     string `json:"id"`
	VmName string `json:"vm_name"`
}

type StopVMRequest struct {
	Id     string `json:"id"`
	VmName string `json:"vm_name"`
}

type UpdateVMRequest struct {
	Id     string `json:"id"`
	VmName string `json:"vm_name"`
}

type VMDisk struct {
	DiskType          uint32 `json:"disk_type,options=1|2|3"`
	SourcePath        string `json:"source_path"`
	SourcePciAddrBus  uint32 `json:"source_pci_addr_bus"`
	SourcePciAddrSlot uint32 `json:"source_pci_addr_slot"`
	TargetDev         string `json:"target_dev"`
	TargetBus         string `json:"target_bus"`
}

type VMDiskAddRequest struct {
	Id         string `json:"id"`
	VmName     string `json:"vm_name"`
	DiskType   uint32 `json:"disk_type"`
	SourcePath string `json:"source_path,optional"`
	TargetDev  string `json:"target_dev,optional"`
	TargetBus  string `json:"target_bus,optional"`
}

type VMDiskDeleteRequest struct {
	Id               string `json:"id"`
	VmName           string `json:"vm_name"`
	DiskType         uint32 `json:"disk_type"`
	SourcePciAddrBus uint32 `json:"source_pci_addr_bus,optional"`
	TargetDev        string `json:"target_dev,optional"`
}

type VMHostdev struct {
	SourceAddrDomain uint32 `json:"source_addr_domain"`
	SourceAddrBus    uint32 `json:"source_addr_bus"`
	SourceAddrSlot   uint32 `json:"source_addr_slot"`
}

type VMHostdevAddRequest struct {
	Id               string `json:"id"`
	VmName           string `json:"vm_name"`
	SourceAddrDomain uint32 `json:"source_addr_domain,optional"`
	SourceAddrBus    uint32 `json:"source_addr_bus"`
	SourceAddrSlot   uint32 `json:"source_addr_slot,optional"`
}

type VMHostdevDeleteRequest struct {
	Id               string `json:"id"`
	VmName           string `json:"vm_name"`
	SourceAddrDomain uint32 `json:"source_addr_domain,optional"`
	SourceAddrBus    uint32 `json:"source_addr_bus"`
	SourceAddrSlot   uint32 `json:"source_addr_slot,optional"`
}

type VMInfo struct {
	Name  string `json:"name"`
	State string `json:"state"`
	Ip    string `json:"ip"`
	Image string `json:"image"`
}

type VMInfoReqeust struct {
	Id     string `form:"id"`
	VmName string `form:"vm_name"`
}

type VMInfoResponse struct {
	CPU        uint32                `json:"cpu"`
	Memroy     uint64                `json:"memory"`
	Disks      []*VMDisk             `json:"disks"`
	Interfaces []*VMNetworkInterface `json:"interfaces"`
	Hostdevs   []*VMHostdev          `json:"hostdevs"`
	VncPort    int32                 `json:"vnc_port"`
}

type VMInterfaceAddRequest struct {
	Id              string `json:"id"`
	VmName          string `json:"vm_name"`
	InterfaceType   uint32 `json:"interface_type"`
	SourceDirectDev string `json:"source_direct_dev,optional"`
	Model           uint32 `json:"model"`
}

type VMInterfaceDeleteRequest struct {
	Id     string `json:"id"`
	VmName string `json:"vm_name"`
	Mac    string `json:"mac"`
}

type VMNetworkInterface struct {
	Name        string `json:"name"`
	Type        string `json:"type"`
	Source      string `json:"source"`
	SourceModel string `json:"source_model"`
	Model       string `json:"model"`
	Mac         string `json:"mac"`
}

type VMOperationResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type VMWSRequest struct {
	NodeId    string `form:"id"`
	Address   string `form:"address,optional"`
	VMAPI     string `form:"vmapi,optional"`
	Transport string `form:"transport"`
}

type MultipassExecRequest struct {
	Id           string `json:"id"`
	InstanceName string `json:"instance_name"`
	Command      string `json:"command"`
}

type MultipassExecResponse struct {
	Output string `json:"output"`
}
