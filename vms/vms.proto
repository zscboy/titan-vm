syntax = "proto3";

package pb;

option go_package = "./pb";

service Vms {
    // Libvirt
    rpc CreateVMWithLibvirt (CreateVMWithLibvirtRequest) returns (VMOperationResponse);
    rpc CreateVolWithLibvirt (CreateVolWithLibvirtReqeust) returns (CreateVolWithLibvirtResponse);
    rpc GetVol(GetVolRequest) returns (GetVolResponse);

    //rpc ListHostNetworkInterfaceWithLibvirt(ListHostNetworkInterfaceRequest) returns (ListHostNetworkInterfaceResponse);
    //rpc ListVMNetwrokInterfaceWithLibvirt(ListVMNetwrokInterfaceReqeust) returns (ListVMNetworkInterfaceResponse);
    rpc AddNetworkInterfaceWithLibvirt(AddNetworkInterfaceRequest) returns (VMOperationResponse);
    rpc DeleteNetworkInterfaceWithLibvirt(DeleteNetworkInterfaceRequest) returns (VMOperationResponse);

    //rpc ListHostDiskWithLibvirt(ListHostDiskRequest) returns (ListDiskResponse);
    //rpc ListVMDiskWithLibvirt(ListVMDiskRequest) returns (ListVMDiskResponse);

    rpc AddDiskWithLibvirt(AddDiskRequest) returns (VMOperationResponse);
    rpc DeleteDiskWithLibvirt(DeleteDiskRequest) returns (VMOperationResponse);
    rpc AddHostdevWithLibvirt(AddHostdevRequest) returns (VMOperationResponse);
    rpc DeleteHostdevWithLibvirt(DeleteHostdevRequest) returns (VMOperationResponse);

    rpc GetVncPortWithLibvirt(VMVncPortRequest) returns (VMVncPortResponse);
    
    rpc ReinstallVMWithLibvirt(ReinstallVMRequest) returns (VMOperationResponse);

    // common
    rpc CreateVM (CreateVMRequest) returns (VMOperationResponse);
    rpc StartVM (StartVMRequest) returns (VMOperationResponse);
    rpc StopVM (StopVMRequest) returns (VMOperationResponse);
    rpc DeleteVM (DeleteVMRequest) returns (VMOperationResponse);
    rpc ListVMInstance (ListVMInstanceReqeust) returns (ListVMInstanceResponse);
    rpc ListImage (ListImageRequest) returns (ListImageResponse);
    rpc DeleteImage(DeleteImageRequest) returns (DeleteImageResponse);
    // not implement now
    rpc UpdateVM (UpdateVMRequest) returns (VMOperationResponse);
    rpc GetVMInfo(GetVMInfoRequest) returns (GetVMInfoResponse);

    // Multipass
    rpc CreateVMWithMultipass (CreateVMWithMultipassRequest) returns (VMOperationResponse);
    rpc MultipassExec(multipassExecRequest) returns (multipassExecResponse); 

    // node
    rpc ListNode(ListNodeRequest) returns (ListNodeResponse);
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse);

}

// common response
message VMOperationResponse {
    bool success = 1;
    string message = 2;
}

// Libvirt 创建请求
message CreateVMWithLibvirtRequest {
    string id = 1;
    string vm_name = 2;
    int32 cpu = 3;          // 明确使用 int32 而非 int
    int32 memory = 4;        // 内存单位建议注明（如 MB）
    string disk_path = 5;
    string iso_path = 6;
}

// Multipass 创建请求
message CreateVMWithMultipassRequest {
    string id = 1;
    string vm_name = 2;
    int32 cpu = 3;
    // with K, M, G suffix.
    string memory = 4;
    // with K, M, G suffix.
    string disk_size = 5;
    // image name or path
    string image = 6;
}

message CreateVMRequest {
    string id = 1;
    string vm_name = 2;
    int32 cpu = 3;
    // unit MB
    int32 memory = 4;
    // unit GB
    int32 disk_size = 5;
    // image name or path
    string image = 6;
}

// 其他操作请求
message StartVMRequest {
    string id = 1;
    string vm_name = 2;
}

message StopVMRequest {
    string id = 1;
    string vm_name = 2;
}

message DeleteVMRequest {
    string id = 1;
    string vm_name = 2;
}

message UpdateVMRequest {
    string id = 1;
    string vm_name = 2;
}

message ListVMInstanceReqeust {
    string id = 1;
}

message VMInfo {
    string name = 1;
    string state = 2;
    string ip = 3;
    string image = 4;
}
 
message ListVMInstanceResponse {
    repeated VMInfo vm_infos = 1;

}

message ListImageRequest {
    string id = 1;
}

message ListImageResponse {
    repeated string images = 1;
}

message DeleteImageRequest {
    string id = 1;
    string path = 2;
}

message DeleteImageResponse {
    bool success =1;
    string message =2;
}

message multipassExecRequest {
    string id = 1;
    string instance_name = 2;
    string command = 3;
}

message multipassExecResponse {
    string output = 1;
}

message CreateVolWithLibvirtReqeust {
    string id = 1;
    string name = 2;
    string pool = 3;
    // unit GB 
    int32 capacity = 4;
    string format = 5;
}

message CreateVolWithLibvirtResponse {
    string pool = 1;
    string name = 2;
    string key = 3;
}

message GetVolRequest {
    string id = 1;
    string pool_name = 2;
    string vol_name =3;
}

message GetVolResponse {
    string name = 2;
    string pool = 3;
    // unit GB 
    int32 capacity = 4;
    string path = 5;
}

message ListNodeRequest {
    int32 start = 1;
    int32 end = 2;
}

message Node {
    string id = 1;
    string os = 2;
    // multipass or libvirt
    string vm_type = 3;
    int32 total_cpu = 4;
    int32 total_memory = 5;
    int32 system_disk_size = 6;
    string ip = 7;
    bool online = 8;
    //int32 cpu_used = 6;
    //int32 memory_used = 7;
}

message ListNodeResponse {
    repeated Node nodes = 1;
    int32 total = 2;
}

message GetNodeRequest {
    string id = 1;
}

message GetNodeResponse {
    Node node = 1;
}

enum InterfaceType {
    INVALID_INTERFACE_TYPE = 0;
    INTERFACE_TYPE_NETWORK = 1;
    INTERFACE_TYPE_DIRECT = 2;
}

enum InterfaceSourceDirectModel {
    INVALID_INTERFACE_SOURCE_DIRECT_MODEL = 0;
    INTERFACE_SOURCE_DIRECT_MODEL_BRIDGE = 1;
    INTERFACE_SOURCE_DIRECT_MODEL_PASSTHROUGH = 2;
}


message HostNetworkInterface {
    string name = 1;
    string mac = 2;
    bool active = 3;
}

message ListHostNetworkInterfaceRequest {
    string id = 1;
}

message ListHostNetworkInterfaceResponse {
    repeated HostNetworkInterface interfaces = 1;
}

message AddNetworkInterfaceRequest {
    string id = 1 ;
    string vm_name = 2;
    InterfaceType type = 3;
    // Required only when type == INTERFACE_TYPE_DIRECT
    string source_direct_dev = 4;
    // Required only when type == INTERFACE_TYPE_DIRECT
    InterfaceSourceDirectModel model = 5;
}

message DeleteNetworkInterfaceRequest {
    string id = 1;
    string vm_name = 2;
    string mac = 3;
}

message ListVMNetwrokInterfaceReqeust {
    string id = 1;
    string vm_name = 2;
}

message VMNetworkInterface{
    string name = 1;
    string type = 2;
    string source = 3;
    string source_model = 4;
    string model = 5;
    string mac = 6;
}

message ListVMNetworkInterfaceResponse {
    repeated VMNetworkInterface interfaces = 1;
}


enum VMDiskType {
    INVALID_DISK_TYPE = 0;
    FILE = 1;
    BLOCK = 2;
    NVME = 3;
} 

message AddDiskRequest {
    string id = 1 ;
    string vm_name = 2;
    VMDiskType disk_type = 3;
    // not required for disk_type=nvme 
    string source_path = 4;
    int32 source_pci_addr_bus = 5;
    int32 source_pci_addr_slot = 6;
    // example: hda, sda, vda
    // not required for disk_type=nvme 
    string target_dev = 7;
    // virtio, scsi, default: virtio
    // not required for disk_type=nvme 
    string target_bus = 8;
}

message DeleteDiskRequest {
    string id = 1;
    string vm_name = 2;
    VMDiskType disk_type = 3;
    int32 source_pci_addr_bus = 4;
    string target_dev = 5;
}

message ListVMDiskRequest {
    string id = 1 ;
    string vm_name = 2;
}

message VMDisk {
    VMDiskType disk_type = 1;
    string source_path = 2;
    // example: hda, sda, vda
    // not required for disk_type=nvme 
    string target_dev = 3;
    // virtio, scsi, default: virtio
    // not required for disk_type=nvme 
    string target_bus = 4;
}

message VMHostdev {
    int32 source_addr_domain =1;
    int32 source_addr_bus =2;
    int32 source_addr_slot =3;
}

message ListVMDiskResponse {
    repeated VMDisk disks = 1;
}

message GetVMInfoRequest {
    string id = 1 ;
    string vm_name = 2;
}

message GetVMInfoResponse {
    uint32 cpu = 1;
    uint64 memory = 2;
    repeated VMDisk disks = 3;
    repeated VMNetworkInterface interfaces = 4;
    repeated VMHostdev hostdevs = 5;
    int32 vnc_port = 6;
}

message VMVncPortRequest {
    string id = 1 ;
    string vm_name = 2;
}

message VMVncPortResponse {
    int32 port = 1;
}

message AddHostdevRequest {
    string id = 1 ;
    string vm_name = 2;
    int32 source_addr_domain = 3;
    int32 source_addr_bus = 4;
    int32 source_addr_slot = 5;
}

message DeleteHostdevRequest {
    string id = 1;
    string vm_name = 2;
    int32 source_addr_domain = 3;
    int32 source_addr_bus = 4;
    int32 source_addr_slot = 5;
}

message ReinstallVMRequest {
    string id = 1;
    string vm_name = 2;
}